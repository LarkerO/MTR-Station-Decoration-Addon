plugins {
    id "com.github.johnrengelman.shadow"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        convertAccessWideners = true;
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
        mixinConfig "msd-common.mixins.json"
        mixinConfig "msd.mixins.json"
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "${rootProject.architectury_id}:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('dev-shadow')
}

remapJar {
    input.set(shadowJar.archiveFile)  // 保持不变（已使用正确的 setter 方式）
    dependsOn(shadowJar)             // 可选：括号更规范，但不影响功能
    setClassifier(null)              // 关键修改：将 classifier null 改为 setClassifier(null)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

task moveForgeBuilds() {
    doLast {
        delete fileTree("../build").matching {
            include "**/MTR-MSD-Addon-forge*"
        }
        copy {
            from "build/libs"
            into "../build/release"
            exclude "*dev-shadow.jar"
            rename "(.+)", "MTR-MSD-Addon-\$1"
        }
        copy {
            from "../build/release"
            into "../build/latest"
            rename { fileName -> fileName.replace(rootProject.mod_version, "latest") }
        }
    }
}

afterEvaluate {
    for (def task in it.tasks) {
        if (task == tasks.build) {
            task.finalizedBy tasks.moveForgeBuilds
        }
    }
}
